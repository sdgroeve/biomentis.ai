---
interface Props {
  href?: string;
  variant?: 'primary' | 'secondary' | 'outline';
  size?: 'small' | 'medium' | 'large';
  class?: string;
}

const { 
  href, 
  variant = 'primary', 
  size = 'medium', 
  class: className = '' 
} = Astro.props;

const Tag = href ? 'a' : 'button';
---

<Tag 
  href={href} 
  class:list={[
    'button', 
    `button-${variant}`, 
    `button-${size}`, 
    className
  ]}
>
  <slot />
</Tag>

<style>
  .button {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    font-weight: 500;
    border-radius: var(--border-radius);
    cursor: pointer;
    transition: all 0.3s ease;
    border: none;
    text-align: center;
    white-space: nowrap;
  }

  .button-primary {
    background-color: var(--primary-color);
    color: var(--secondary-color);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  .button-primary:hover {
    background-color: #e0aa00;
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
  }

  .button-secondary {
    background-color: var(--secondary-color);
    color: var(--white);
  }

  .button-secondary:hover {
    background-color: #2d3748;
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
  }

  .button-outline {
    background-color: transparent;
    color: var(--secondary-color);
    border: 2px solid var(--secondary-color);
  }

  .button-outline:hover {
    background-color: var(--secondary-color);
    color: var(--white);
    transform: translateY(-2px);
  }

  .button-small {
    padding: 0.5rem 1rem;
    font-size: 0.875rem;
  }

  .button-medium {
    padding: 0.75rem 1.5rem;
    font-size: 1rem;
  }

  .button-large {
    padding: 1rem 2rem;
    font-size: 1.125rem;
  }
</style>
